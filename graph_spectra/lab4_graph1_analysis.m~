% clear variables
clear all;
close all;

% read csv graph
data = csvread("../graph_spectra/example1.csv");
% plot adjacency matrix
figure,plot(data(:,1), data(:,2),'r+'), title('Original Data Points'); grid on;shg

% compute A (step 1 in algorithm)
A = CalculateAffinity(data);
% plot A
figure,imshow(A,[]), title('Affinity Matrix')

% compute D (diagonal matrix
for i=1:size(A,1)
    D(i,i) = sum(A(i,:));
end

% compute L = D^(-1/2)AD^(-1/2)
for i=1:size(A,1)
    for j=1:size(A,2)
        L(i,j) = A(i,j) / (sqrt(D(i,i)) * sqrt(D(j,j)));  
    end
end

[eigVectors,eigValues] = eig(L);

k = 4;
nEigVec= eigVectors(:,(size(eigVectors,1)-(k-1)): size(eigVectors,1));

% construct the normalized matrix U from the obtained eigen vectors
for i=1:size(nEigVec,1)
    n = sqrt(sum(nEigVec(i,:).^2));    
    U(i,:) = nEigVec(i,:) ./ n; 
end

% perform kmeans clustering on the matrix U
[IDX,C] = kmeans(U,k); 

% plot the eigen vector corresponding to the largest eigen value
%figure,plot(IDX)
figure,
hold on;
for i=1:size(IDX,1)
    if IDX(i,1) == 1
        plot(data(i,1),data(i,2),'m+');
    elseif IDX(i,1) == 2
        plot(data(i,1),data(i,2),'g+');
    elseif IDX(i,1) == 3 
        plot(data(i,1),data(i,2),'b+');
    else
        plot(data(i,1),data(i,2),'k+');
    end
end
hold off;
title('Clustering Results using K-means');
grid on;shg

function [A] = CalculateAffinity(data)

% set the parameters
sigma = 1;

for i=1:size(data,1)    
    for j=1:size(data,1)
        dist = sqrt((data(i,1) - data(j,1))^2 + (data(i,2) - data(j,2))^2); %Euclidean distance
        A(i,j) = exp(-dist/(2*sigma^2));
    end
end
end